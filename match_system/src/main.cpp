// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Mathch.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <thread>
#include <mutex> //多线程———锁
#include <condition_variable> //条件变量对锁进行了封装
#include <queue>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match_service;
using namespace std;

struct Task
{
    User user;
    string type;
};

struct MessageQueue
{
    queue<Tast>q;
    mutex m;
    condition_variable cv;
}message_queue;

class MathchHandler : virtual public MathchIf {
    public:
        MathchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");
            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user ,"add"});
            message_queue.cv.notify_all();

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");
            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user,"remove"});
            message_queue.cv.notify_all();

            return 0;
        }

};

void comsume_task()
{
    while(true)
    {
        unique_lock<mutex> lck(message_queue);
        if(message_queue.q.empty())
        {
            message_queue.cv.wait(lck);
        }
        else
        {
            auto task=message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();
            //do task
        }
    }
}

int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MathchHandler> handler(new MathchHandler());
    ::std::shared_ptr<TProcessor> processor(new MathchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);


    cout << "Start Match Server" <<endl;


    thread matching_thread(consume_task);
    server.serve();


    return 0;
}

